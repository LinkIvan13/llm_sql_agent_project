# -*- coding: utf-8 -*-
import sys
import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from agent.agent import create_agent
from agent.db_utils import init_telegram_logs, log_telegram_query

# –ó–∞–≥—Ä—É–∑–∫–∞ .env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
agent = create_agent()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø SQL-–±–æ—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏ —è –Ω–∞–π–¥—É –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ üì¶."
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(2)  # üîÑ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

    user = update.effective_user
    user_input = update.message.text

    try:
        response = agent.run(user_input)

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
        log_telegram_query(
            user_id=user.id,
            username=user.username or "unknown",
            query=user_input,
            result=str(response)
        )

        await update.message.reply_text(f"üß† –û—Ç–≤–µ—Ç:\n{response}")

    except Exception as e:
        if "rate_limit_exceeded" in str(e).lower():
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ OpenAI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


def main():
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    init_telegram_logs()

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    main()
